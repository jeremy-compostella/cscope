This Emacs package provides a client interface for =cscope=, a developer's tool for browsing C/C++ source code. It allows users to perform various cscope queries directly within Emacs and view the results in a dedicated buffer with features for easy navigation. This package provides a smooth integration by adhering to the traditional Emacs principle of a compilation or grep buffer.
** Features
- *Integration with cscope:* Executes cscope searches directly from Emacs.
- *Multiple Search Types:* Supports all standard cscope search types (find symbol, definition, callers, callees, text, egrep pattern, file, including files, assignments).
- *Result Navigation:* Provides a dedicated =cscope-mode= for displaying search results, allowing easy navigation with =next-error= and =previous-error= (bound to =n= and =p= by default, inherited from =grep-mode=).
- *History:* Maintains a history of previous searches, allowing you to easily repeat or undo searches.
- *Project Awareness:* Attempts to intelligently determine the top-level directory of your project, making it easier to find the =cscope.out= database. Supports git repositories.
- *Database Generation:* Provides a function to generate the =cscope.out= database directly from Emacs.
- *Transient Menu:* Provides a transient menu (=e= key in cscope-mode) for easy access to common cscope actions.
** Requirements
- Emacs 29.4 or later
- Magit 3.3.0 or later
- A working installation of the =cscope= command-line tool.
** Installation
1. Make =cscope.el= available in your =load-path=.
2. Add the following to your Emacs initialization file (=.emacs=, =init.el=, etc.):
   #+begin_src emacs-lisp
     (require 'cscope)
   #+end_src
3. Optionally, you can bind some keys; below is an example configuration.
   #+begin_src emacs-lisp
     (require 'asm-mode)
     (require 'cc-mode)
     (require 'dired)
     (require 'ld-script)
     (dolist (mode '(cscope c ld-script asm dired))
       (let ((map (intern (concat (symbol-name mode) "-mode-map"))))
	 (define-key (symbol-value map) (kbd "M-.") #'cscope-find-this-function-definition)
	 (define-key (symbol-value map) (kbd "M-,") #'cscope-find-this-C-symbol)
	 (define-key (symbol-value map) (kbd "C-c s") #'cscope-entry)))
     (setq next-error-recenter '(4))
   #+end_src
 
** Usage
1. *Generate the cscope database:* In the root directory of your project, run =M-x cscope-generate-database=. This will create the =cscope.out= database file. Alternatively, if your project has a =Makefile= with a =cscope= target, the package will use =make cscope= to generate the database. The database will be automatically built on the first search attempt.

2. *Perform a search:* Use =M-x cscope-query= to initiate a search. You'll be prompted for the search type and the symbol/text to search for. Alternatively, use the pre-defined commands for each search type:

   - =M-x cscope-find-this-C-symbol=
   - =M-x cscope-find-this-function-definition=
   - =M-x cscope-Find-functions-called-by-this-function=
   - =M-x cscope-find-functions-calling-this-function=
   - =M-x cscope-find-this-text-string=
   - =M-x cscope-change-this-text-string=
   - =M-x cscope-find-this-egrep-pattern=
   - =M-x cscope-find-this-file=
   - =M-x cscope-find-files-including-file=
   - =M-x cscope-find-assignments-to-this-symbol=

3. *Navigate the results:* The search results will be displayed in a =cscope-mode= buffer.

   - Use =M-p= or =M-n= to move the cursor to the previous or next match.
   - Use =n= (next-error) and =p= (previous-error) to move between matches. Pressing =<return>= on a match will jump to the corresponding location.
   - Use ={= and =}= to move the cursor to the previous or next file.
   - Use =C-o= to display the current match.
   - Use =RET= to jump to the current match.
   - Use =P= or =N= to execute the previous or the next search in the cscope buffer history.
